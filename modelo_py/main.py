# Fun√ß√£o que calcula as opera√ß√µes
def calcular_operacoes(a,b):
    """ CALCULA E RETORNA AS 6 OPERACOES PRINCIPAIS"""
    # Array para armazenar as operacoes
    resultados = {
        'soma': a+b,
        'subtracao':a-b,
        'multiplicacao':a*b,
        'divisao':a/b if b != 0 else "Erro: Divis√£o por zero",
        'resto': a%b if b!= 0 else "Erro: Divis√£o por zero",
        'potencia': a**b
    }
    return resultados

# Fun√ß√£o que exibe os resultados
def exibir_resultados(a,b,operacoes):
    """Exibe os resultados formatados das opera√ß√µes."""
    print(f"\n‚Üí Resultados para {a} e {b}:")
    print(f" {'SOMA:':<15} ‚Üí {a} + {b} = {operacoes['soma']}.")
    print(f" {'SUBTRACAO:':<15} ‚Üí {a} - {b} = {operacoes['subtracao']}.")
    print(f" {'MULTPLICACAO:':<15} ‚Üí {a} * {b} = {operacoes['multiplicacao']}.")
    print(f" {'DIVISAO:':<15} ‚Üí {a} / {b} = {operacoes['divisao']}.")
    print(f" {'RESTO:':<15} ‚Üí {a} % {b} = {operacoes['resto']}.")
    print(f" {'POTENCIA:':<15} ‚Üí {a} ^ {b} = {operacoes['potencia']}.")

# Fun√ß√£o que obt√™m os valores
def obter_numeros():
    """Solicita e retorna dois n√∫meros inteiros ao usu√°rio."""
    # Loop at√© receber entrada v√°lida (evita recurs√£o)
    while True:

        # Garante que o valor ser√° inteiro
        try:
            a = float(input("Digite um valor real: "))
            b = float(input("Digite outro valor real: "))
            return a,b
        
        # Caso n√£o seja, retorna erro 
        except ValueError:
            print("Por favor, digite um valor valido!")


# Garante que o c√≥digo s√≥ execute se o arquivo for rodado diretamente
if __name__ == "__main__":
    print("üåü Calculadora 4 Opera√ß√µes üåü")
    a,b = obter_numeros()
    operacoes = calcular_operacoes(a,b)
    exibir_resultados(a,b,operacoes)